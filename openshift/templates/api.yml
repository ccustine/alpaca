---
kind: Template
apiVersion: v1
metadata:
  name: ec-api
  annotations:
    openshift.io/display-name: Everyware Cloud API
    description: Everyware Cloud API service.
    iconClass: icon-ec
    tags: ec,api
    template.openshift.io/long-description: This template provides a standalone API server.
    template.openshift.io/provider-display-name: Eurotech S.p.A.
    template.openshift.io/support-url: https://support.eurotech.com
message: "The following service(s) have been created in your project: ${EC_SERVICE_NAME}."
labels:
  template: ec-api-template
objects:
- kind: Service
  apiVersion: v1
  metadata:
    name: "${EC_SERVICE_NAME}"
  spec:
    ports:
    - name: "${EC_SERVICE_NAME}"
      protocol: TCP
      port: 8080
      targetPort: 8080
    selector:
      app: "${EC_SERVICE_NAME}"
      deploymentconfig: "${EC_SERVICE_NAME}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    generation: 1
    labels:
      app: "${EC_SERVICE_NAME}"
    name: "${EC_SERVICE_NAME}"
  spec:
    replicas: 1
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${EC_SERVICE_NAME}"
        from:
          kind: ImageStreamTag
          name: "${EC_SERVICE_NAME}:${IMAGE_VERSION}"
          namespace: "${NAMESPACE}"
    - type: ConfigChange
    selector:
      app: "${EC_SERVICE_NAME}"
      deploymentconfig: "${EC_SERVICE_NAME}"
    template:
      metadata:
        labels:
          app: "${EC_SERVICE_NAME}"
          deploymentconfig: "${EC_SERVICE_NAME}"
      spec:
        containers:
        - env:
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: "${EC_SECRET_DB}"
                key: name
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: "${EC_SECRET_DB}"
                key: username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${EC_SECRET_DB}"
                key: password
          - name: JAVA_OPTS
            value:
              -Xmx1G
              -Dcommons.db.connection.host=${DB_HOST}
              -Dcommons.db.connection.port=${DB_PORT}
              -Dcommons.db.jdbcConnectionUrlResolver=${DB_RESOLVER}
              -Dcommons.db.jdbc.driver=${DB_DRIVER}
              -Dcommons.db.connection.scheme=${DB_CONNECTION_SCHEME}
              -Dcommons.db.schema=${DB_SCHEMA_NAME}
              -Dcommons.db.schema.update=${DB_SCHEMA_UPDATE}
              -Dcommons.db.name=${DB_NAME}
              -Dcommons.db.username=${DB_USERNAME}
              -Dcommons.db.password=${DB_PASSWORD}
              -Dbroker.host=${BROKER_HOST}
              -Ddatastore.elasticsearch.nodes=${STORAGE_HOST}
              -Ddatastore.elasticsearch.port=${STORAGE_PORT}
              -Dcertificate.jwt.private.key=file:///tmp/key.pk8
              -Dcertificate.jwt.certificate=file:///tmp/cert.pem
              -Dkapua.config.dir=/etc/opt/ec/defaults
              ${JAVA_OPTS_EXTRA}
          image: "${EC_SERVICE_NAME}:${IMAGE_VERSION}"
          imagePullPolicy: Always
          name: "${EC_SERVICE_NAME}"
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 50
            timeoutSeconds: 5
            failureThreshold: 3
            periodSeconds: 10
          livenessProbe:
            timeoutSeconds: 5
            initialDelaySeconds: 25
            httpGet:
              path: /
              port: 8080
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
          securityContext:
              runAsUser: 1000
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
      securityContext:
        runAsUser: 1000
parameters:
- name: IMAGE_VERSION
  description: The version of the image to use
  value: latest
- name: MEMORY_LIMIT
  displayName: Memory Limit
  description: Maximum amount of memory the container can use.
  value: 2Gi
  required: true
- name: NAMESPACE
  displayName: Namespace
  description: The OpenShift Namespace where the ImageStream resides.
  value: ec
- name: EC_SERVICE_NAME
  displayName: EC api Service Name
  description: The name of the OpenShift Service.
  value: ec-api
  required: true
- name: BROKER_HOST
  description: Address of the broker service
  value: ec-broker.ec.svc.cluster.local
  required: true
- name: STORAGE_HOST
  description: Address of the storage service
  value: elasticsearch.ec.svc.cluster.local
  required: true
- name: STORAGE_PORT
  description: Port of the storage service
  value: "9200"
  required: true
- name: DB_HOST
  description: Address of the DB
  value: mariadb.ec.svc.cluster.local
  required: true
- name: DB_PORT
  description: The version of the image to use
  value: "3306"
  required: true
- name: DB_SCHEMA_NAME
  description: Automatically update DB schema
  value: "ecdb"
  required: true
- name: DB_SCHEMA_UPDATE
  description: Automatically update DB schema
  value: "true"
  required: true
- name: DB_RESOLVER
  description: JDBC connection URL resolver
  value: MariaDB
  required: true
- name: DB_DRIVER
  description: JDBC driver
  value: org.mariadb.jdbc.Driver
  required: true
- name: DB_CONNECTION_SCHEME
  description: JDBC connection scheme
  value: jdbc:mariadb
  required: true
- name: EC_SECRET_DB
  description: Name of the secret containing DB credentials
  value: "ec-db"
  required: true
